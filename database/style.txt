<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Chat Assistant</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/style.css">
  </head>
  <body>
    <div id="app" class="container py-4 text-center">
      <h1>AI Chat Assistant Demo</h1>
      <p>Click the chat button in the bottom right corner to start a conversation.</p>
    </div>

    <div id="chat-button" class="chat-button">
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
        <path d="M20 2H4c-1.1 0-2 .9-2 2v18l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm0 14H6l-2 2V4h16v12z"/>
      </svg>
    </div>

    <div id="chat-container" class="chat-container">
      <div class="chat-header">
        <h3>AI Assistant</h3>
        <button id="close-button" class="btn-close btn-close-white"></button>
      </div>
      <div id="chat-messages" class="chat-messages"></div>
      <div class="chat-input">
        <input type="text" class="form-control" placeholder="Type your message...">
        <button class="btn btn-primary send-button">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
            <path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"/>
          </svg>
        </button>
      </div>
    </div>

    <script type="module" src="/chat.js"></script>
  </body>
</html>


document.addEventListener('DOMContentLoaded', function() {
  const chatButton = document.getElementById('chat-button');
  const chatContainer = document.getElementById('chat-container');
  const closeButton = document.getElementById('close-button');
  const messagesContainer = document.getElementById('chat-messages');
  const input = document.querySelector('.chat-input input');
  const sendButton = document.querySelector('.send-button');

  let isOpen = false;

  function toggleChat() {
    isOpen = !isOpen;
    chatContainer.classList.toggle('active', isOpen);
    if (isOpen) {
      input.focus();
    }
  }

  function addMessage(text, isUser = true) {
    const message = document.createElement('div');
    message.className = `message ${isUser ? 'user-message' : 'assistant-message'}`;
    message.textContent = text;
    messagesContainer.appendChild(message);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
  }

  async function sendMessage() {
    const text = input.value.trim();
    if (!text) return;

    addMessage(text, true);
    input.value = '';

    try {
      const response = await fetch('/api/chat/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRFToken': getCookie('csrftoken')
        },
        body: JSON.stringify({ message: text })
      });

      if (!response.ok) {
        throw new Error('Network response was not ok');
      }

      // Fallback response if API call fails
      setTimeout(() => {
        addMessage('Thank you for your message! This is a demo response from the AI assistant.', false);
      }, 1000);

    } catch (error) {
      console.error('Error:', error);
      addMessage('Sorry, there was an error processing your message.', false);
    }
  }

  function getCookie(name) {
    let cookieValue = null;
    if (document.cookie && document.cookie !== '') {
      const cookies = document.cookie.split(';');
      for (let i = 0; i < cookies.length; i++) {
        const cookie = cookies[i].trim();
        if (cookie.substring(0, name.length + 1) === (name + '=')) {
          cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
          break;
        }
      }
    }
    return cookieValue;
  }

  chatButton.addEventListener('click', toggleChat);
  closeButton.addEventListener('click', toggleChat);
  sendButton.addEventListener('click', sendMessage);
  input.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') sendMessage();
  });
});


:root {
  --primary-color: #0d6efd;
  --chat-width: 320px;
  --chat-height: 480px;
}

body {
  margin: 0;
  font-family: system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
}

.chat-button {
  position: fixed;
  bottom: 2rem;
  right: 2rem;
  width: 60px;
  height: 60px;
  border-radius: 50%;
  background-color: var(--primary-color);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: transform 0.3s ease;
  z-index: 1000;
}

.chat-button:hover {
  transform: scale(1.05);
}

.chat-button svg {
  width: 24px;
  height: 24px;
  fill: white;
}

.chat-container {
  position: fixed;
  bottom: 2rem;
  right: 2rem;
  width: var(--chat-width);
  height: var(--chat-height);
  background-color: white;
  border-radius: 0.5rem;
  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
  display: flex;
  flex-direction: column;
  overflow: hidden;
  z-index: 1000;
  opacity: 0;
  transform: translateY(20px);
  pointer-events: none;
  transition: all 0.3s ease;
}

.chat-container.active {
  opacity: 1;
  transform: translateY(0);
  pointer-events: all;
}

.chat-header {
  padding: 1rem;
  background-color: var(--primary-color);
  color: white;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.chat-header h3 {
  margin: 0;
  font-size: 1.1rem;
}

.chat-messages {
  flex: 1;
  padding: 1rem;
  overflow-y: auto;
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.message {
  max-width: 80%;
  padding: 0.75rem 1rem;
  border-radius: 1rem;
  line-height: 1.4;
}

.user-message {
  background-color: #e9ecef;
  align-self: flex-end;
  border-bottom-right-radius: 4px;
}

.assistant-message {
  background-color: var(--primary-color);
  color: white;
  align-self: flex-start;
  border-bottom-left-radius: 4px;
}

.chat-input {
  padding: 1rem;
  border-top: 1px solid #dee2e6;
  display: flex;
  gap: 0.5rem;
}

.send-button {
  padding: 0.5rem !important;
  display: flex;
  align-items: center;
  justify-content: center;
}

.send-button svg {
  width: 20px;
  height: 20px;
  fill: white;
}